class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        deque<int> dq; // Store indexes in Deque
        vector<int> ans;

        // Step 1: Process first k size window
        for(int i=0; i<k; i++){      
            while(!dq.empty() && nums[dq.back()] < nums[i]){
                dq.pop_back();
            }
            // Insert Element:
            dq.push_back(i);
        }

        // Store Ans of first window:
        ans.push_back(nums[dq.front()]);

        // Step 2: Process remaining windows:
        for(int i=k; i<nums.size(); i++){
            // Removal:
            if(!dq.empty() && i-k >= dq.front()){
                dq.pop_front();
            }

            // Additional:
            while(!dq.empty() && nums[dq.back()] < nums[i]){
                dq.pop_back();
            }
            // Insert Element:
            dq.push_back(i);

            // Store Answer:
            ans.push_back(nums[dq.front()]);
        } 
        return ans;
    }
};
