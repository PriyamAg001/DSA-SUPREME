Code:
class Solution {
public:
    bool isInArray(vector<int>& arr, int num) {
        for (int i = 0; i < arr.size(); i++) {
            if (arr[i] == num) {
                return true;
            }
        }
        return false;
    }

    vector<vector<int>> findDifference(vector<int>& nums1, vector<int>& nums2) {
        vector<int> diff1, diff2;

        for (int i = 0; i < nums1.size(); i++) {
            bool found = false;
            for (int j = 0; j < nums2.size(); j++) {
                if (nums1[i] == nums2[j]) {
                    found = true;
                    break;
                }
            }
            if (!found && !isInArray(diff1, nums1[i])) {
                diff1.push_back(nums1[i]);
            }
        }

        for (int i = 0; i < nums2.size(); i++) {
            bool found = false;
            for (int j = 0; j < nums1.size(); j++) {
                if (nums2[i] == nums1[j]) {
                    found = true;
                    break;
                }
            }
            if (!found && !isInArray(diff2, nums2[i])) {
                diff2.push_back(nums2[i]);
            }
        }

        return {diff1, diff2};
    }
};

Time complexity: O(n^3)
Space complexity: O(n)
