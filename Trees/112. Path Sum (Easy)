Code:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool pathSum(TreeNode* root, int targetSum, int sum){
        // Base Case
        if(root == nullptr){
            return false;
        }
        if(root -> left == nullptr && root -> right == nullptr){
            sum = sum + root -> val;
            if(sum == targetSum){
                return true;
            }
        }
        bool leftAns = pathSum(root -> left, targetSum, sum + root -> val);
        bool rightAns = pathSum(root -> right, targetSum, sum + root -> val);
        
        return leftAns || rightAns;
    }
    bool hasPathSum(TreeNode* root, int targetSum) {
        int sum = 0;
        return pathSum(root, targetSum, sum);
    }
};

Complexity:
Time complexity: O(n)
Space complexity: O(n)
