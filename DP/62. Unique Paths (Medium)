Code:
class Solution {
public:
    int uniquePaths(int m, int n) {
        int dp[m][n];
        for(int i=0, j=0; j<n; j++){
          dp[i][j] = 1;  
        } 
        for(int j=0, i=0; i<m; i++) {
            dp[i][j] = 1;
        }
        
        for(int i=1; i<m; i++){
            for(int j=1; j<n; j++){
                dp[i][j] = dp[i-1][j] + dp[i][j-1];
            }
        }
        return dp[m-1][n-1];
    }
};

Time complexity: O(m*n), where m and n are the dimensions of the grid. This is because each cell in the grid is visited exactly once.
Space complexity: O(mn), as a 2D array of size mn is used for the dynamic programming table. Each cell in this table stores the number of unique paths to reach that cell.
class Solution {
